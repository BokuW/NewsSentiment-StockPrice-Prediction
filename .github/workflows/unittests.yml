# .github/workflows/unittests.yml
name: Python CI

on:
  push:
    branches:
      - main
      - task-1
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest # Specifies the operating system for the runner

    strategy:
      matrix:
        python-version: ["3.10"] # Defines the Python version(s) to test against

    steps:
      #  Checkout the repository code
      - uses: actions/checkout@v4

      # Set up the specified Python version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      #  Install Python dependencies, prioritizing TA-Lib via pip
      # This is the most straightforward and often successful approach.
      # pip will try to find a pre-compiled wheel for the given Python version and OS.
      - name: Install Python dependencies (including TA-Lib via pip)
        run: |
          set -xeo pipefail # Exit immediately if a command exits with a non-zero status. Print commands.

          # Upgrade pip to the latest version
          python -m pip install --upgrade pip
          
          # Install TA-Lib first. This might install a pre-built wheel.
          pip install TA-Lib
          
          # Install all other Python dependencies from requirements.txt.
          # This should now work if TA-Lib is already satisfied or if it's in requirements.txt.
          pip install -r requirements.txt

      # Run project tests
      - name: Run tests
        run: |
          pytest # Execute your project's tests (assuming pytest is in requirements.txt)