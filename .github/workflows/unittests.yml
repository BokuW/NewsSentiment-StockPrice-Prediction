# .github/workflows/unittests.yml
name: Python CI

on:
  push:
    branches:
      - main
      - task-1
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest # Specifies the environment to run the job on

    strategy:
      matrix:
        python-version: ["3.10"] # Defines the Python version(s) to test against

    steps:
      # Step 1: Checkout the repository code
      - uses: actions/checkout@v4

      # Step 2: Set up the specified Python version
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install the TA-Lib C library
      # This step attempts to install TA-Lib via apt-get first.
      # If apt-get fails (common for TA-Lib on some Ubuntu versions),
      # it falls back to downloading, compiling, and installing from source.
      - name: Install TA-Lib C library (apt with source fallback)
        run: |
          set -xeo pipefail # Exit immediately if a command exits with a non-zero status. Print commands and their arguments as they are executed.

          sudo apt-get update # Update package lists to ensure latest information

          # Attempt to install TA-Lib development packages via apt-get.
          # The '||' operator means if the first command fails, execute the second.
          if ! sudo apt-get install -y libta-lib0 libta-lib-dev; then
            echo "Apt packages not found or failed to install. Building TA-Lib from source..."

            # Install additional dependencies required for compiling C/C++ projects
            # autoconf, automake, libtool are often needed for './configure' scripts
            sudo apt-get install -y build-essential wget gcc g++ make autoconf automake libtool

            # Download TA-Lib source code from SourceForge
            wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz

            # Extract the downloaded tar.gz archive
            tar -xvzf ta-lib-0.4.0-src.tar.gz

            # Navigate into the extracted TA-Lib source directory
            cd ta-lib

            # Configure the build process.
            # CFLAGS="-std=c99 -lm": Sets C compiler flags.
            #   -std=c99: Forces compliance with the C99 standard.
            #   -lm: Explicitly links against the math library (libm),
            #        which is necessary for functions like 'pow' and 'floor'
            #        that TA-Lib uses, and which 'configure' previously indicated
            #        it couldn't find without explicit linking.
            # --prefix=/usr: Specifies the installation directory for the compiled library
            #                to be a standard system-wide location.
            ./configure CFLAGS="-std=c99 -lm" --prefix=/usr

            # Compile the TA-Lib C library.
            # -j$(nproc): Uses all available CPU cores for parallel compilation, speeding up the process.
            make -j$(nproc)

            # Install the compiled TA-Lib C library to the system.
            sudo make install

            # Update the dynamic linker run-time bindings cache.
            # This is CRUCIAL. It tells the system where to find the newly installed
            # shared library (libta-lib.so), allowing the Python TA-Lib binding
            # to link against it successfully during its own installation.
            sudo ldconfig

            # Navigate back to the root of the repository to continue with Python dependencies
            cd ..
          fi

      # Step 4: Install Python dependencies from requirements.txt
      - name: Install Python dependencies
        run: |
          # Upgrade pip to the latest version to ensure best compatibility and features
          python -m pip install --upgrade pip
          
          # Install all Python packages listed in requirements.txt.
          # The Python TA-Lib binding (if listed in requirements.txt) will now
          # successfully find and link against the C library installed in the previous step.
          pip install -r requirements.txt

      # Step 5: Run project tests (e.g., unit tests, integration tests)
      - name: Run tests
        run: |
          pytest # Assumes pytest is installed via requirements.txt and tests are configured