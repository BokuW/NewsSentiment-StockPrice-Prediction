# .github/workflows/unittests.yml
name: Python CI

on:
  push:
    branches:
      - main
      - task-1
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install TA-Lib C library (apt with source fallback)
        run: |
          set -xeo pipefail # Exit immediately if a command exits with a non-zero status. Print commands and their arguments as they are executed.

          sudo apt-get update # Update package lists
          
          # Attempt to install TA-Lib development packages via apt-get first.
          # If this fails (due to packages not being found, common on newer Ubuntu versions),
          # then fall back to building from source.
          if ! sudo apt-get install -y libta-lib0 libta-lib-dev; then
            echo "Apt packages not found or failed to install. Building TA-Lib from source..."
            
            # Install necessary build tools for compiling from source
            sudo apt-get install -y build-essential wget
            
            # Download TA-Lib source code
            wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
            
            # Extract the source code
            tar -xvzf ta-lib-0.4.0-src.tar.gz
            
            # Navigate into the extracted directory
            cd ta-lib
            
            # Configure the build.
            # CFLAGS="-std=c99 -lm" forces C99 standard and links the math library,
            # which helps with compatibility on modern GCC compilers.
            # --prefix=/usr installs to standard system locations.
            ./configure CFLAGS="-std=c99 -lm" --prefix=/usr
            
            # Compile the TA-Lib C library using all available processor cores.
            # This was changed back from -j1 (which was for debugging truncated logs)
            # to -j$(nproc) for faster compilation in CI.
            make -j$(nproc) 
            
            # Install the compiled TA-Lib C library to the system.
            sudo make install
            
            # Update the dynamic linker run-time bindings.
            # THIS IS THE CRUCIAL FIX for 'cannot find -lta-lib' error.
            # It ensures that the Python TA-Lib binding can find the newly installed C library.
            sudo ldconfig 
            
            # Navigate back to the root of the repository
            cd ..
          fi

      - name: Install Python dependencies
        run: |
          # Upgrade pip to the latest version
          python -m pip install --upgrade pip
          
          # Install all Python dependencies listed in requirements.txt.
          # This includes the Python TA-Lib binding which will now find the C library.
          pip install -r requirements.txt

      - name: Run tests
        run: |
          # Execute your project's tests
          pytest